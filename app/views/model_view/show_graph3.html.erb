    <% if @dbelems != nil %>
    <% path = @dbelems.function_names[0]['path'] == nil ? 'model_functions/textmodel.js' : @dbelems.function_names[0]['path'].to_s %>
    <%= javascript_include_tag path %>

    <div class="wrapper" id="wrapper">
      <div style="display:none"  id="hiddenright">
        <i id="hiddenright" class="fa fa-arrow-right" style="font-size:25px;" role="button">
        </i>
      </div>
      <nav id="sidebar">
          <i id="left" class="fa fa-arrow-left" style="font-size:35px;" role="button"></i>
           <div class="sidebar-header" align="center">
              <h3>Ausgaben Input</h3>
           </div>

       <ul style="list-style-type:none">

         <% @dbelems.settings_widgets.each do |settings_widgets| %>
         <% @sliderId = 'slider' + settings_widgets['order_number'].to_s %>

         <li id="<%= settings_widgets['order_number'].to_s %>" title="<%= settings_widgets['title'].to_s %>" class="lis"><%= settings_widgets['value'].to_s %>
           <div id="<%= @sliderId %>" class="slider" data="<%= settings_widgets['order_number'].to_s %>">
           </div>
         </li>

         <% if settings_widgets['order_number'] == 0 %>
         <div class="sidebar-header" align="center">
            <h4>Konkrete Ausgabepositionen:</h4>
         </div>
         <% end %>

         <% @setSliderId = settings_widgets['id'].to_s %>
         <% puts ' :setting2_2: ' + @dbelems.sub_slider_settings.to_s %>
         <% if @dbelems.sub_slider_settings.key?(@setSliderId) %>

         <button type="close" class="button_close" data="<%= @setSliderId %>" style="background-color:#f9f9f9;">set <%= settings_widgets['value'] %>: </button>

         <% end %>
         <% end %>
      <!--   <li>
         <% if @choice == 'exp1' %>
         <%#= button_to raw('Update1  &#10003'), {:controller => "model_view", :action => "show_graph3", :id => 4}, :method=>:get, :disabled => true %>
         <% else %>
         <%#= button_to raw('Update1'), {:controller => "model_view", :action => "show_graph3", :id => 4}, :params => {:choice => 'exp1'}, :method=>:get %>
         <% end %>

         <% if @choice == 'exp2' %>
         <%#= button_to raw('Update2  &#10003'), {:controller => "model_view", :action => "show_graph3", :id => 4}, :method=>:get, :disabled => true %>
         <% else %>
         <%#= button_to raw('Update2'), {:controller => "model_view", :action => "show_graph3", :id => 4}, :params => {:choice => 'exp2', :arr => 'return showarr();'}, :method=>:get %>
         <% end %>

         <% if @choice == 'exp3' %>
         <%#= button_to raw('Update3  &#10003'), {:controller => "model_view", :action => "show_graph3", :id => 4}, :method=>:get, :disabled => true %>
         <% else %>
         <%#= button_to raw('Update3'), {:controller => "model_view", :action => "show_graph3", :id => 4}, :params => {:choice => 'exp3'}, :method=>:get %>
         <% end %>

         <% if @choice == 'exp4' %>
         <%#= button_to raw('Update4  &#10003'), {:controller => "model_view", :action => "show_graph3", :id => 4}, :method=>:get, :disabled => true %>
         <% else %>
         <%#= button_to raw('Update4'), {:controller => "model_view", :action => "show_graph3", :id => 4}, :params => {:choice => 'exp4'}, :method=>:get %>
         <% end %>

       </li> -->

       <li>
         <br>
         <br>
       <% if @choice == 'exp1' %>
        <button class="button_choice" data="exp1" style="background-color: yellow;" disabled>Update1  &#10003</button>
       <% else %>
        <button class="button_choice" data="exp1">Update1</button>
       <% end %>
       <br>
       <br>
       <% if @choice == 'exp2' %>
       <button class="button_choice" data="exp2" style="background-color: yellow;" disabled>Update2  &#10003</button>
        <% else %>
        <button class="button_choice" data="exp2">Update2</button>
       <% end %>
       <br>
       <br>
       <% if @choice == 'exp3' %>
       <button class="button_choice" data="exp3" style="background-color: yellow;" disabled>Update3  &#10003</button>
       <% else %>
       <button class="button_choice" data="exp3">Update3</button>
       <% end %>
       <br>
       <br>
       <% if @choice == 'exp4' %>
       <button class="button_choice" data="exp4" style="background-color: yellow;" disabled>Update4  &#10003</button>
       <% else %>
       <button class="button_choice" data="exp4">Update4</button>
       <% end %>

     </li>
<!--
         <div id='tge1' align="left">

<input id="toggle-event" type="checkbox" checked data-toggle="toggle" data-size="small" data-onstyle="info" data-offstyle="info"
    data-on="Exp  " data-off="Exp" data-true="de" data-false="en">
</input>
<br>
<br>
<input id="toggle-event" type="checkbox" checked data-toggle="toggle" data-size="small" data-onstyle="info" data-offstyle="info"
    data-on="name2" data-off="name3" data-true="en" data-false="de">
</input>

</div> -->

        <!-- <li>
           <%= check_box_tag "Monday", "yes" %>
           <%= label_tag "Monday" %>
         </li>
         <div class="field">
           <%= form_tag home_path do %>
           <%= check_box "Monday", "yes" %> Monday
           <% end %>
</div> -->
<!--
<div class="form-inline">
    <%#= f.check_box :subscribed, class: 'form-control' %>
    <%#= f.label :subscribed, "Subscribe" %>
  </div>
  <div class="field">
    <%= check_box_tag "Monday", "yes" %>
    <%= 'label' %><br>
  </div>
<%= form_tag home_path, :method => :get do %>
  <li>
    <%= check_box_tag "1", 1 %>
    <%= 'name1' %>
  </li>
  <li>
    <%= check_box_tag "1", 1 %>
    <%= 'name2' %>
  </li>
  <li>
    <%= check_box_tag "1", 1 %>
    <%= 'name3' %>
  </li>
  <li>
    <%= check_box_tag "1", 1 %>
    <%= 'name4' %>
  </li>
  <%= submit_tag "sub" %>
<% end %> -->
       </ul>
<!-- <% form_tag home_path do %>
<ul>
  <li>
    <%= check_box_tag "1", 1 %>
    <%= 'name' %>
  </li>
</ul>
<% end %> -->

       <p id="hidden" style="display:none;"></p>
   </nav>

   <div id="contentinner">
      <h1>Tierwohl Modell</h1>
      <div class="mainContent">
        <div id="tabs">

          <% @dbelems.output_values.each_with_index do |output, index| %>

            <button id="<%= output['order_number'].to_s %>" data="button" type="button" style="background-color: #f9f9f9" class="autocompare_"><%= output['title'].to_s %></button>

          <% end  %>

        </div>
        <div class="wrapperinner">
          <div id="container1" remote="true" style=" min-height: 400px;"></div>
        </div>
      </div>

      </div>
      <div style="display:none" id="hiddenleft">
        <i id="left" class="fa fa-arrow-left" style="font-size:25px;" role="button">
        </i>
      </div>
<div id="containerinner2">
  <h1><%= @dbelems.interface['before_step'] %></h1>

  <div class="checkbox">
      <label>
        <%= @dbelems.interface['fix'] %>
      </label>
      <input data-toggle="toggle" type="checkbox" class="fixOutput">
  </div>
  <div id="container2" remote="true" style="display:none;  min-height: 300px"></div>

  <div class="inputsList">
      <ul class="outputName" style="list-style-type:none"><%= @dbelems.interface['input'] %>

        <% @dbelems.settings_widgets.each_with_index do |setting, index| %>

        <li class="elem">
          <div class="inputName"><%= setting['value'] %>  :     </div>
          <div class="inputValue" id="inputValue">-1</div>
        </li>

          <% @setId = setting['id'].to_s %>
          <% puts ' :setting1: ' + @setId %>

          <% puts ' :setting2: ' + @dbelems.sub_slider_settings.to_s %>
          <% if @dbelems.sub_slider_settings.key?(@setId) %>
          <% puts "slider settings: " + @dbelems.sub_slider_settings[@setId].to_s %>
          <% @dbelems.sub_slider_settings[@setId].each_with_index do |setting_, index_| %>
          <% puts "setting_:: " + setting_.to_s %>

            <li class="elem" id="<%= @setId %>" data="<%= setting_['order_number'] %>">
              <div class="inputName"> - <%= setting_['value'] %>  :     </div>
              <div class="inputValue" id="inputValue">-1</div>
            </li>

          <% end %>
          <% end %>
        <% end %>

      </ul>
  </div>
</div>
</div>

<script>
var tabsChosen = 0;
var inputToSave = [];
//var firstStart = true;
$(function () {

  var outputFixed = false;

  var old_chart_options = null;
  var old_chart_series = null;
  var fixed_chart_options = null;

  var hiddenElem = document.getElementById("hidden");
  var chartType = "line";

  var firstTabChosen = document.getElementsByClassName("autocompare_")[tabsChosen];
  firstTabChosen.style.backgroundColor = '#5bc0de';
  var textContent = firstTabChosen.textContent;

  var series = [{
      name: '',
      data: []
  }];

  var chartOptions = {
    chart: { type: "" },
    title: { text: "" },
    tooltip: { shared: true },
    plotOptions: { column: {
      minPointLength: 3,
      pointRange: 2,
      pointPadding: 0.2,
      borderWidth: 0,
      crop: false,
      overflow: 'none',
      shadow: false,
    //  stacking: "normal",
      grouping: false
      }
    },
    xAxis: { type: "", categories: [], title: { text : "" } },
    yAxis: { title: { text: "" },
    //  tickInterval: 0.01
   }
 };

$('#left').on("click", function(event) {
  $(this).hide();
  $('#savebutton').prop('disabled', true);
  var close_path = '<%= home_path %>';
  document.location.href = close_path;
});

$(window).on("navigate", function (event, data) {
  var direction = data.state.direction;
  if (direction == 'back') {
    var home_path = '<%= home_path %>';
    document.location.href = home_path;
  }
});

var old_dbelems = <%= raw @dbelems.params_with_default_values.to_json %>;
var old_nested_dbelems = <%= raw @dbelems.nested_slider_settings.to_json %>;


var autocompare = false;

var nested_settings = <%= raw @dbelems.nested_slider_settings.to_json %>;
var function_names = <%= raw @dbelems.function_names.to_json %>;

//set mu's
<% if @choice == 'exp2' %>
  window['mu'] = window['mu2'];
<% elsif @choice == 'exp3' %>
  window['mu'] = window['mu3'];
<% elsif @choice == 'exp4' %>
  window['mu'] = window['mu4'];
<% else %>
  window['mu'] = window['mu1'];
<% end %>

 $(document).on('ready', function() {

  var dbelems = <%= raw @dbelems.settings_widgets.to_json %>;
  var subdbelems = <%= raw @dbelems.sub_slider_settings.to_json %>;

    $(".lis").each(function (index, value) {
      var sliderId  = 'slider' + index.toString();
      var sliderIndex = dbelems[index]['id'];
      var subsettings = subdbelems[sliderIndex];

      <% if @input == nil %>
        var valueShown = parseFloat(dbelems[index]['default_value']);
        inputToSave.push(valueShown);
      <% else %>
        inputToSave = <%= raw @input %>;
        var valueShown = inputToSave[index];
      <% end %>

      $('#'+ sliderId).slider({
            min: parseFloat(dbelems[index]['min']),
            max: parseFloat(dbelems[index]['max']),
            step: parseFloat(dbelems[index]['step']),
            values: [valueShown]
          })
          .slider("pips", {
                first: "label",
                last: "label",
                rest: "label",
                step: parseFloat(dbelems[index]['inner_step']),
                labels: false,
                prefix: "",
                suffix: ""
            })
            .slider("float");
    });
  });

  $('#savebutton').click(function (event) {
    $(this).text('...');
    $(this).prop('disabled', true);
    $('#left').hide();
  var close_path = '<%= home_path %>';
  document.location.href = close_path;
  });

  $('.fixOutput').change( function() {
    outputFixed = !outputFixed;
    fixed_chart_options = old_chart_options;
  });

  $('.button_choice').on("click", function(event) {
    var chosenInterface = $(this).attr('data').toString();
    var g_path = '<%= @current_path %>';

    document.location.href = g_path + '?choice=' + chosenInterface + '&input_array=' + inputToSave;
  });

  $('.button_close').click(function (event) {
      var state = $(this).attr('type') == 'close' ? true : false;


        var correspondingId = $(this).attr('data');
        if(state) {
          $(this).css('background-color', '#5bc0de');
          var textArray = $(this).text().split(" ");
          textArray[0] = 'close';
          $(this).text(textArray[0] + " " + textArray[1] + " " + textArray[2]);

          $(this).attr('type', 'show');
          $( ".slider" ).slider( "option", "disabled", true );
          $('.slis').each(function(i) {
          var slisId = $(this).attr('data');

          if($(this).attr('data') != correspondingId) {
            $(this).hide();
          } else {
            $(this).show();
          }

          $("button").each(function(i) {
            if($(this).attr('data') != correspondingId) {
              $(this).prop("disabled", true);
            }
          });

        });
      } else {
          $(this).attr('type', 'close');
          $(this).css('background-color', '#f9f9f9');
          var textArray = $(this).text().split(" ");
          textArray[0] = 'set';
          $(this).text(textArray[0] + " " + textArray[1] + " " + textArray[2]);

          $( ".slider" ).slider( "option", "disabled", false );
          $('.slis').each(function(i) {
            var slisId = $(this).attr('data');

            if($(this).attr('data') == correspondingId) {
              $(this).hide();
            }
          });

          $("button").each(function(i) {
            $(this).prop("disabled", false);
          });
      }
  });

 $('.autocompare_').click(function (event) {
    autocompare = true;
    if ($(this).hasClass('active')) {
      return;
    }
    $(".autocompare_").removeClass("active");
    $(".autocompare_").css('background-color', '#f9f9f9');
    $(this).addClass("active");
    $(this).css('background-color', '#5bc0de');


    $('#hiddenleft').hide();

     old_chart_options = null;
     old_chart_series = null;

     var dbelems = <%= raw @dbelems.output_values.to_json %>;
     idChosen = parseInt(event.target.id);
     tabsChosen = parseInt(event.target.id);
     chartType = dbelems[idChosen]['chart_type'];

     var title = dbelems[idChosen]['title'];
     chartOptions.chart.type = chartType;
     chartOptions.title = title;
     chartOptions.xAxis.categories = dbelems[idChosen]['xcategories'];
     chartOptions.yAxis.title.text = dbelems[idChosen]['yname'];
     updateChartWithValues();
 });

  $('.slider').on("slidechange", function(event, ui) {

        autocompare = false;
        var dbelems = <%= raw @dbelems.params_with_default_values.to_json %>;
        var index = parseInt($(this).attr('data'));

        window[dbelems[index]['param_name']] = parseFloat(ui.value);
        inputToSave[index] = parseFloat(ui.value);

        chartOptions.title = '<%= @dbelems.interface['old_values'] %>';
        hiddenElem.value = chartOptions;

       if(!outputFixed) {
        $('.elem').each(function(index, value) {

          var element = $(this).find('#inputValue');
          element.html(old_nested_dbelems[index]['default_value']);
        });
      };

        // : 1 if old --- new in series, : 0 if new --- old in series
        var seriesElement = (chartOptions.series.length == 1) ? 0 : 0;

        old_chart_series = chartOptions.series;

        old_chart_options = {
          colors: ['rgba(168, 168, 168, 0.6)'],
          chart: { type: chartOptions.chart.type },
          title: { text: chartOptions.title },
          plotOptions: {
            column: {
              minPointLength: 2,
              pointRange: 2,
              pointPadding: 0.2,
              borderWidth: 0,
            }
          },
          xAxis: { type: chartOptions.xAxis.type, categories: chartOptions.xAxis.categories,  title: { text: chartOptions.xAxis.title.text }},
          yAxis: { title: { text: chartOptions.yAxis.title.text } },
          series: [old_chart_series[seriesElement]]
        };

        updateChartWithValues();

        old_dbelems[index]['default_value'] = parseFloat(ui.value);

        for( var i = 0; i < old_nested_dbelems.length; i++) {
          if(old_nested_dbelems[i]['id'] == dbelems[index]['settings_id']) {
            old_nested_dbelems[i]['default_value'] = parseFloat(ui.value);
          }
        }
  });

 window.updateChart = function(series) {
  <% puts "update function called" %>
  <% puts "res: " + @dbelems.output_values[0][:order_number].to_s %>

  <% if @input != nil %>
    inputToSave = <%= raw @input %>;
    window.alert("def values 1 ");
    var defaultvalues = <%= raw @dbelems.params_with_default_values.to_json %>;
      for(i = 0; i < inputToSave.length; i++) {
        window.alert("def values: " + inputToSave[i]);
        window[defaultvalues[i]['param_name']] = parseFloat(inputToSave[i]);
        old_dbelems[i]['default_value'] = parseFloat(inputToSave[i]);
        old_nested_dbelems[i]['default_value'] = parseFloat(inputToSave[i]);
      }
  <% end %>

  tabsChosen = parseInt('<%=  @dbelems.output_values[0]['order_number'].to_s %>');
  chartType = "<%= @dbelems.output_values[0]['chart_type'].to_s %>";
  var title = "<%= @dbelems.output_values[0]['title'].to_s %>";
  chartOptions.chart.type = chartType;
  chartOptions.title = title;
  chartOptions.xAxis.categories = <%= raw @dbelems.output_values[0]['xcategories'] %>;
  chartOptions.yAxis.title.text = '<%= raw @dbelems.output_values[0]['yname'] %>';
  chartOptions.xAxis.title.text = '<%= raw @dbelems.output_values[0]['xname'] %>';

  updateChartWithValues();
};

window.updateChartWithValues = function() {
    var dbelems = <%= raw @dbelems.output_values.to_json %>;
    var dbfunctions = <%= raw @dbelems.function_names.to_json %>;
    var index = tabsChosen;

    chartOptions.xAxis.title.text = dbelems[index]['xname'];

    var functionName = dbfunctions[index]['name'];

    var seriesData = "";

    if(autocompare == false) {
      var functionName1 = window[functionName];
      seriesData = functionName1();
    } else {
      functionName = 'v_' + functionName.toString();
      var functionName1 = window[functionName];
      seriesData = functionName1();
    }

    var displaycement = 0.0;

    if (chartOptions.chart.type == 'line') {
      displaycement = 0.1;
    }

    var seriesData1 = [];
    var old_chart_options1 = [];

    for(var i = 0; i < seriesData.length; i++ ) {
      var serie1 = {"x": i, "y": parseFloat(seriesData[i])};
      seriesData1.push(serie1);
    };

    if(old_chart_options != null) {
      for(var i = 0; i < old_chart_options.series[0]['data'].length; i++ ) {
        var oldserie1 = {"x": parseFloat(i + displaycement), "y": parseFloat(old_chart_options.series[0]['data'][i]['y'])};
        old_chart_options1.push(oldserie1);
      };
    };

    if (old_chart_options != null) {

    chartOptions.colors = ['rgba(66, 139, 202, 1.0)', 'rgba(168, 168, 168, 0.6)'];
    chartOptions.series = [
      {
          name: dbelems[index]['title'],
          data: seriesData1,
          pointPadding: 0.2,
      },
      {
        name: 'old ' + dbelems[index]['title'].toString(),
        data: old_chart_options1,
        pointPadding: 0.3,
    }
    ];
  } else {

    chartOptions.colors = ['rgba(66, 139, 202, 1.0)'];
    chartOptions.series = [{
        name: dbelems[index]['title'],
        data: seriesData1
      }
    ];
  }

    Highcharts.chart('container1', chartOptions);

    var elementToHide = document.getElementById("container2");
    var containerToHide = document.getElementById("containerinner2");

    if (old_chart_options != null) {
      $('#hiddenleft').hide();

      if(true) {
        containerToHide.style.display = "block";
        elementToHide.style.display = "block";

        if(!outputFixed) {
          old_chart_options.colors = ['rgba(168, 168, 168, 1.0)'];
          old_chart_options['series'][0]['_colorIndex'] = 0;

          Highcharts.chart('container2', old_chart_options);
        } else {
        };
      }
    } else {
        if(!outputFixed) {
          elementToHide.style.display = "none";
          containerToHide.style.display = "none";
      }
    };
};

updateChart(series);
});
</script>

    <style>
      main {
        background-color: transparent;
      }

      body {
        background-color: rgba(255,228,196, 0.3);
      }

      .wrapper {
        background-color: transparent;
      }

      li > form > input{
        background: #5bc0de;
        width: 10vw;
      }

      .button_choice {
        background: #5bc0de;
        width: 10vw;
      }
    </style>
  <% end %>
