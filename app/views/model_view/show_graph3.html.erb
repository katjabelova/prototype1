<!DOCTYPE html>
<html lang="en">
<head>
  <title>Bootstrap Example</title>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>
  <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.7/js/bootstrap.min.js"></script>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/malihu-custom-scrollbar-plugin/3.1.5/jquery.mCustomScrollbar.min.css">
  <link href='http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/themes/base/jquery-ui.css' rel='stylesheet' type='text/css'>
  <link href = "https://code.jquery.com/ui/1.10.4/themes/ui-lightness/jquery-ui.css" rel = "stylesheet">

  <script src="https://code.jquery.com/jquery-2.1.1.js"></script>
  <script src="https://code.jquery.com/ui/1.11.1/jquery-ui.js"></script>

  <link rel="stylesheet" href="https://code.jquery.com/ui/1.10.4/themes/flick/jquery-ui.css">
  <link href="https://gitcdn.github.io/bootstrap-toggle/2.2.2/css/bootstrap-toggle.min.css" rel="stylesheet">
  <script src="https://gitcdn.github.io/bootstrap-toggle/2.2.2/js/bootstrap-toggle.min.js"></script>

  <script scr="https://cdnjs.cloudflare.com/ajax/libs/jQuery-ui-Slider-Pips/1.11.4/jquery-ui-slider-pips.css"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jQuery-ui-Slider-Pips/1.11.4/jquery-ui-slider-pips.js"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jQuery-ui-Slider-Pips/1.11.4/jquery-ui-slider-pips.min.css"></script>
  <script src="https://cdnjs.cloudflare.com/ajax/libs/jQuery-ui-Slider-Pips/1.11.4/jquery-ui-slider-pips.min.js"></script>
  <style>

  main {
    margin-right: 0px;
    margin-left: 0px;
    background-color: transparent;
  }

  body {
    width: 100vw;
    background-color: rgba(255,228,196, 0.3);
  }

  .wrapper {
    background-color: transparent;
  }

  </style>
</head>
  <body id="body">
    <% path = @dbelems.function_names[0]['path'] == nil ? 'model_functions/textmodel.js' : @dbelems.function_names[0]['path'].to_s %>
    <%= javascript_include_tag path %>
    <div class="wrapper" id="wrapper">
      <div style="display:none"  id="hiddenright">
        <i id="hiddenright" class="fa fa-arrow-right" style="font-size:25px;" role="button">
        </i>
      </div>
      <nav id="sidebar">
          <i id="left" class="fa fa-arrow-left" style="font-size:25px;" role="button"></i>
       <div class="sidebar-header" align="center">
           <h3>Settings</h3>
       </div>
       <ul style="list-style-type:none">
         <% @dbelems.settings_widgets.each do |settings_widgets| %>
         <% @sliderId = 'slider' + settings_widgets['order_number'].to_s %>
         <li id="<%= settings_widgets['order_number'].to_s %>" title="<%= settings_widgets['title'].to_s %>" class="lis"><%= settings_widgets['value'].to_s %>
           <div id="<%= @sliderId %>" class="slider" data="<%= settings_widgets['order_number'].to_s %>">
           </div>
         </li>

         <% @setSliderId = settings_widgets['id'].to_s %>
         <% puts ' :setting2_2: ' + @dbelems.sub_slider_settings.to_s %>
         <% if @dbelems.sub_slider_settings.key?(@setSliderId) %>
         <button type="close" class="btn btn-info" data="<%= @setSliderId %>">set <%= settings_widgets['value'] %>: </button>
         <% puts "slider settings__: " + @dbelems.sub_slider_settings[@setSliderId].to_s %>
         <% @dbelems.sub_slider_settings[@setSliderId].each_with_index do |setting_, index_| %>
         <% @subSliderId = @setSliderId + '_' + 'subslider'+ '_' + setting_['order_number'].to_s %>
         <li id="<%= setting_['order_number'].to_s %>" title="<%= setting_['title'].to_s %>" class="slis" data="<%= @setSliderId %>" style="display:none"><%= setting_['value'].to_s %>
           <div id="<%= @subSliderId %>" class="subslider" data="<%= setting_['order_number'].to_s %>">
           </div>
         </li>

         <% end %>
         <% end %>
         <% end %>
       </ul>

       <p id="hidden" style="display:none;"></p>
   </nav>
   <div id="contentinner">
      <h1>Model <%= @id.to_s %></h1>
      <script src="http://code.highcharts.com/highcharts.js"></script>
      <script src="http://code.highcharts.com/modules/exporting.js"></script>

      <div class="mainContent">
        <div>
          <% @dbelems.output_values.each do |output| %>
          <% puts "tilte: " +  output['title'].to_s %>
          <button id="<%= output['order_number'].to_s %>" type="button" style="background-color: #f9f9f9" class="autocompare_"><%= output['title'].to_s %></button>
          <% end  %>
        </div>
        <div class="wrapperinner">
          <div id="container1" remote="true" style=" min-height: 400px;"></div>
        </div>
      </div>

      </div>
      <div style="display:none" id="hiddenleft">
        <i id="left" class="fa fa-arrow-left" style="font-size:25px;" role="button">
        </i>
      </div>
<div id="containerinner2">
  <i id="right" class="fa fa-arrow-right" style="font-size:25px;" role="button"></i>
  <div id="container2" remote="true" style="display:none;  min-height: 300px"></div>
  <div class="inputsList">

    <div class="checkbox">
        <label>
          Fix output for input values
        </label>
        <input data-toggle="toggle" type="checkbox" class="fixOutput"></input>
    </div>

      <ul class="outputName" style="list-style-type:none">Values for inputs:
        <% @dbelems.settings_widgets.each_with_index do |setting, index| %>
        <li class="elem">
          <div class="inputName"><%= setting['value'] %>  :     </div>
          <div class="inputValue" id="inputValue">-1</div>
        </li>

          <% @setId = setting['id'].to_s %>
          <% puts ' :setting1: ' + @setId %>

          <% puts ' :setting2: ' + @dbelems.sub_slider_settings.to_s %>
          <% if @dbelems.sub_slider_settings.key?(@setId) %>
          <% puts "slider settings: " + @dbelems.sub_slider_settings[@setId].to_s %>
          <% @dbelems.sub_slider_settings[@setId].each_with_index do |setting_, index_| %>
          <% puts "setting_:: " + setting_.to_s %>
            <li class="elem" id="<%= @setId %>" data="<%= setting_['order_number'] %>">
              <div class="inputName"> - <%= setting_['value'] %>  :     </div>
              <div class="inputValue" id="inputValue">-1</div>
            </li>
          <% end %>
          <% end %>
        <% end %>
      </ul>
  </div>
</div>
</div>
<script>
var tabsChosen = 0;

$(function() {
  var outputFixed = false;

  var wrapperwidth = document.getElementById("body").getBoundingClientRect().width;

  var old_chart_options = null;
  var old_chart_series = null;
  var fixed_chart_options = null;

  var hiddenElem = document.getElementById("hidden");
  var chartType = "line";

  var firstTabChosen = document.getElementsByClassName("autocompare_")[tabsChosen];
  firstTabChosen.style.backgroundColor = '#5bc0de';

  var series = [{
      name: '',
      data: []
  }];

  var chartOptions = {
    chart: { type: "" },
    title: { text: "" },
    tooltip: {
                shared: true
            },
    plotOptions: { column: {
      minPointLength: 3,
      pointRange: 2,
      pointPadding: 0.2,
      borderWidth: 0,
      crop: false,
      overflow: 'none',
      shadow: false,
    //  stacking: "normal",
      grouping: false

    }
    },
    xAxis: { type: "", categories: [] },
    yAxis: {
      title: { text: "" },
    //  tickInterval: 0.01
   }
 };
$(document).tooltip();

$('#left').on("click", function(event) {
  $('#sidebar').hide();
  $('#hiddenright').show();
});

$('#right').on("click", function(event) {
  $('#containerinner2').hide();
  $('#hiddenleft').show();
});

$('#hiddenright').on("click", function(event) {
  $('#hiddenright').hide();
  $('#sidebar').show();
});

$('#hiddenleft').on("click", function(event) {
  $('#hiddenleft').hide();
  $('#containerinner2').show();
});

var old_dbelems = <%= raw @dbelems.params_with_default_values.to_json %>;
var old_nested_dbelems = <%= raw @dbelems.nested_slider_settings.to_json %>;

$(document).on('ready', function() {
  var dbelems = <%= raw @dbelems.settings_widgets.to_json %>;
  var subdbelems = <%= raw @dbelems.sub_slider_settings.to_json %>;

    $(".lis").each(function (index, value) {
      var sliderId  = 'slider' + index.toString();
      var sliderIndex = dbelems[index]['id'];
      var subsettings = subdbelems[sliderIndex];

      $('#'+ sliderId).slider({
            min: parseFloat(dbelems[index]['min']),
            max: parseFloat(dbelems[index]['max']),
            step: parseFloat(dbelems[index]['step']),
            values: [parseFloat(dbelems[index]['default_value'])]
          })
          .slider("pips", {
                first: "label",
                last: "label",
                rest: "label",
                step: parseFloat(dbelems[index]['inner_step']),
                labels: false,
                prefix: "",
                suffix: ""
            })
            .slider("float");

            if(subsettings == null) {
          //    window.alert("no subsettings");
            } else {
          //    window.alert("subsettings found");

              for(var i = 0; i < subsettings.length; i++) {
                var setting = subsettings[i];
                var subSliderId  = sliderIndex + '_' + 'subslider'+ '_' + i.toString();

                $('#'+ subSliderId).slider({
                      min: parseFloat(setting['min']),
                      max: parseFloat(setting['max']),
                      step: parseFloat(setting['step']),
                      values: [parseFloat(setting['default_value'])]
                    })
                    .slider("pips", {
                          first: "label",
                          last: "label",
                          rest: "label",
                          step: parseFloat(setting['inner_step']),
                          labels: false,
                          prefix: "",
                          suffix: ""
                      })
                      .slider("float");
              }
              /*
              subsettings.each(setting, function(index, item) {
                    var subSliderId  = 'subslider' + index.toString();
                    $('#'+ subSliderId).slider({
                          min: parseFloat(setting['min']),
                          max: parseFloat(setting['max']),
                          step: parseFloat(setting['step']),
                          values: [parseFloat(setting['default_value'])]
                        })
                        .slider("pips", {
                              first: "label",
                              last: "label",
                              rest: "label",
                              step: parseFloat(setting['inner_step']),
                              labels: false,
                              prefix: "",
                              suffix: ""
                          })
                          .slider("float");
              }); */

        /*      $(".slis").each(function (index1, value1) {
                //  var sliderId  = 'subslider'
                  //index.toString();
                  var setting = subsettings[index1];
                  var subSliderId  = 'subslider' + index1.toString();
                  $('#'+ subSliderId).slider({
                        min: parseFloat(setting['min']),
                        max: parseFloat(setting['max']),
                        step: parseFloat(setting['step']),
                        values: [parseFloat(setting['default_value'])]
                      })
                      .slider("pips", {
                            first: "label",
                            last: "label",
                            rest: "label",
                            step: parseFloat(setting['inner_step']),
                            labels: false,
                            prefix: "",
                            suffix: ""
                        })
                        .slider("float");
              }); */
            };
    });

  //  $('.elem').each(function(index, value) {
 //  $('#elem').bind("beforeShow", function(event, ui) {
  /*    window.alert(" bound ");
      var element = $(this).find('#inputValue');
      window.alert("element: " + element.html());
      element.html(old_dbelems[index]['default_value']); */
    //  $(this).text() = old_dbelems[index]['param_name'];
  //  });

  });

  $('.fixOutput').change(function() {
        outputFixed = !outputFixed;
        fixed_chart_options = old_chart_options;
  });

  $('.btn').click(function (event) {
      var state = $(this).attr('type') == 'close' ? true : false;

    //  if(state) {
        var correspondingId = $(this).attr('data');
        if(state) {
          var textArray = $(this).text().split(" ");
          textArray[0] = 'close';
          $(this).text(textArray[0] + " " + textArray[1] + " " + textArray[2]);

          $(this).attr('type', 'show');
          $( ".slider" ).slider( "option", "disabled", true );
          $('.slis').each(function(i) {
          var slisId = $(this).attr('data');
        //  window.alert('slis data: ' + slisId.toString());
          if($(this).attr('data') != correspondingId) {
            $(this).hide();
          } else {
            $(this).show();
          }

          $(".btn").each(function(i) {
            if($(this).attr('data') != correspondingId) {
              $(this).prop("disabled", true);
            }
          });

        });
      } else {
          $(this).attr('type', 'close');

          var textArray = $(this).text().split(" ");
          textArray[0] = 'set';
          $(this).text(textArray[0] + " " + textArray[1] + " " + textArray[2]);

          $( ".slider" ).slider( "option", "disabled", false );
          $('.slis').each(function(i) {
            var slisId = $(this).attr('data');
          //  window.alert('slis data: ' + slisId.toString());
            if($(this).attr('data') == correspondingId) {
              $(this).hide();
            }
          });

          $(".btn").each(function(i) {
            $(this).prop("disabled", false);
          });
      }
    /*    var correspondingId = $(this).attr('data');
        var subdbelems = <%= raw @dbelems.sub_slider_settings.to_json %>;

        var pifsettings = subdbelems[correspondingId];
        for(var i = 0; i < pifsettings.length; i++) {
          var orderNumber = pifsettings[i]['order_number'];
        } */
    //  }
  });

/*  $('.fixOutput').bootstrapToggle({
     window.alert("toggle found");
  }); */

 $('.autocompare_').click(function (event) {
    $(".autocompare_").removeClass("active");
    $(".autocompare_").css('background-color', '#f9f9f9');
    $(this).addClass("active");
    $(this).css('background-color', '#5bc0de');

   //if(!outputFixed) {
     $('#hiddenleft').hide();
   //};
     old_chart_options = null;
     old_chart_series = null;

     var dbelems = <%= raw @dbelems.output_values.to_json %>;
     idChosen = parseInt(event.target.id);
     tabsChosen = parseInt(event.target.id);
     chartType = dbelems[idChosen]['chart_type'];

     var title = dbelems[idChosen]['title'];
     chartOptions.chart.type = chartType;
     chartOptions.title = title;
     chartOptions.xAxis.categories = dbelems[idChosen]['xcategories'];
     updateChartWithValues();
 });

 /*$('#elem').show(1000, function() {
      alert('in show callback');
    }); */

  // $('.slider').on("slidestop", function(event, ui) {
//  containerinner2
//  $('#containerinner2').show(1000, function() {
  //   $('#elem').each(function(index, value) {
  //  $('#elem').bind("beforeShow", function(event, ui) {
  /*     window.alert(" bound ");
       var element = $(this).find('#inputValue');
       window.alert("element: " + element.html());
       element.html(old_dbelems[index]['default_value']);
     //  $(this).text() = old_dbelems[index]['param_name']; */
  //   });
  // });

  $('.subslider').on("slidechange", function(event, ui) {
    var dbelems = <%= raw @dbelems.sub_slider_settings.to_json %>;
    var subSliderIdArray = $(this).attr('id').split('_');
    var slider = dbelems[subSliderIdArray[0]][subSliderIdArray[2]];
    var index = subSliderIdArray[0] + subSliderIdArray[2]
  //  window.alert("subslider set: " + slider['param_name'].toString());
    window[slider['param_name']](parseFloat(ui.value));

    chartOptions.title = "previous values";
    hiddenElem.value = chartOptions;

    if(!outputFixed) {
     $('.elem').each(function(index, value) {
  //  $('#elem').bind("beforeShow", function(event, ui) {
   //    window.alert(" bound ");
       var element = $(this).find('#inputValue');
   //    window.alert("element: " + element.html());
       element.html(old_nested_dbelems[index]['default_value']);
     //  $(this).text() = old_dbelems[index]['param_name'];
     });
   };

    // : 1 if old --- new in series, : 0 if new --- old in series
    var seriesElement = (chartOptions.series.length == 1) ? 0 : 0;

    old_chart_series = chartOptions.series;

  //  window.alert("length of series: " + JSON.stringify(old_chart_series));
    old_chart_options = {
    //  colors: ['#A8A8A8'],
      colors: ['rgba(168, 168, 168, 0.6)'],
      chart: { type: chartOptions.chart.type },
      title: { text: chartOptions.title },
      plotOptions: {
        column: {
          minPointLength: 2,
          pointRange: 2,
          pointPadding: 0.2,
          borderWidth: 0,
        }
      },
      xAxis: { type: chartOptions.xAxis.type, categories: chartOptions.xAxis.categories},
      yAxis: { title: { text: chartOptions.yAxis.title.text } },
      series: [old_chart_series[seriesElement]]
    };

    updateChartWithValues();

    old_nested_dbelems[index]['default_value'] = parseFloat(ui.value);
  });

  $('.slider').on("slidechange", function(event, ui) {
        //delete
        if($(this).attr('id').match('(.)*subslider(.*)')) {
          return;
        }
        //delete

        var dbelems = <%= raw @dbelems.params_with_default_values.to_json %>;
        var index = parseInt($(this).attr('data'));
        window.alert("element set: " + dbelems[index]['param_name']);

        window[dbelems[index]['param_name']] = parseFloat(ui.value);

        chartOptions.title = "previous values";
        hiddenElem.value = chartOptions;

       if(!outputFixed) {
        $('.elem').each(function(index, value) {
     //  $('#elem').bind("beforeShow", function(event, ui) {
      //    window.alert(" bound ");
          var element = $(this).find('#inputValue');
      //    window.alert("element: " + element.html());
          element.html(old_dbelems[index]['default_value']);
        //  $(this).text() = old_dbelems[index]['param_name'];
        });
      };

        // : 1 if old --- new in series, : 0 if new --- old in series
        var seriesElement = (chartOptions.series.length == 1) ? 0 : 0;

        old_chart_series = chartOptions.series;

      //  window.alert("length of series: " + JSON.stringify(old_chart_series));
        old_chart_options = {
        //  colors: ['#A8A8A8'],
          colors: ['rgba(168, 168, 168, 0.6)'],
          chart: { type: chartOptions.chart.type },
          title: { text: chartOptions.title },
          plotOptions: {
            column: {
              minPointLength: 2,
              pointRange: 2,
              pointPadding: 0.2,
              borderWidth: 0,
            }
          },
          xAxis: { type: chartOptions.xAxis.type, categories: chartOptions.xAxis.categories},
          yAxis: { title: { text: chartOptions.yAxis.title.text } },
          series: [old_chart_series[seriesElement]]
        };

    //    window.alert("series: " + JSON.stringify(old_chart_series));

        updateChartWithValues();

        old_dbelems[index]['default_value'] = parseFloat(ui.value);
  });

 window.updateChart = function(series) {
  <% puts "update function called" %>
  <% puts "res: " + @dbelems.output_values[0][:order_number].to_s %>
  tabsChosen = parseInt('<%=  @dbelems.output_values[0]['order_number'].to_s %>');
  chartType = "<%= @dbelems.output_values[0]['chart_type'].to_s %>";
  var title = "<%= @dbelems.output_values[0]['title'].to_s %>";
  chartOptions.chart.type = chartType;
  chartOptions.title = title;
  chartOptions.xAxis.categories = <%= raw @dbelems.output_values[0]['xcategories'] %>;
  chartOptions.yAxis.title.text = '<%= raw @dbelems.output_values[0]['yname'] %>';
  updateChartWithValues();
};

window.updateChartWithValues = function() {
    var dbelems = <%= raw @dbelems.output_values.to_json %>;
    var dbfunctions = <%= raw @dbelems.function_names.to_json %>;
    var index = tabsChosen;
    var functionName = dbfunctions[index]['name'];
    var functionName1 = window[functionName];
    var seriesData = functionName1();

    //////////
    var displaycement = 0.0;

    if (chartOptions.chart.type == 'line') {
      displaycement = 0.1;
    }

    var seriesData1 = [];
    var old_chart_options1 = [];

    for(var i = 0; i < seriesData.length; i++ ) {
      var serie1 = {"x": i, "y": parseFloat(seriesData[i])};
      seriesData1.push(serie1);
    };

    if(old_chart_options != null) {
      for(var i = 0; i < old_chart_options.series[0]['data'].length; i++ ) {
        var oldserie1 = {"x": parseFloat(i + displaycement), "y": parseFloat(old_chart_options.series[0]['data'][i]['y'])};
        old_chart_options1.push(oldserie1);
      };
    };

  //  window.alert("series data length: " + JSON.stringify(seriesData1));
  //  window.alert("chart options length: " + JSON.stringify(old_chart_options1));
    ////////////

    if (old_chart_options != null) {
    //  window.alert("chart options != null");
    //2d color: '#428bca'
    chartOptions.colors = ['rgba(66, 139, 202, 1.0)', 'rgba(168, 168, 168, 0.6)'];
    chartOptions.series = [
      {
          name: dbelems[index]['title'],
          data: seriesData1,
          pointPadding: 0.2,

        //  data: seriesData,
        //  stack: 'new',
      },
      {
        name: 'old ' + dbelems[index]['title'].toString(),
        data: old_chart_options1,
        pointPadding: 0.3,

      //  data: JSON.parse("[" + old_chart_series1[0]['data'] + "]"),
      //  stack: 'old',
    }
    ];
  } else {
  //  chartOptions.colors = ['#428bca'];
    chartOptions.colors = ['rgba(66, 139, 202, 1.0)'];
    chartOptions.series = [{
        name: dbelems[index]['title'],
        data: seriesData1
      }
    ];
  }

    Highcharts.chart('container1', chartOptions);

    var elementToHide = document.getElementById("container2");
    var containerToHide = document.getElementById("containerinner2");

    if (old_chart_options != null) {
    //  window.alert("json stringify: " + JSON.stringify(old_chart_options));

    //  if(!outputFixed) {
        $('#hiddenleft').hide();
    //  }
      if(true) {
        containerToHide.style.display = "block";
        elementToHide.style.display = "block";

        if(!outputFixed) {
          old_chart_options.colors = ['rgba(168, 168, 168, 1.0)'];
          old_chart_options['series'][0]['_colorIndex'] = 0;
    //    window.alert("json stringify2: " + JSON.stringify(old_chart_options));
          Highcharts.chart('container2', old_chart_options);
        } else {
        //  Highcharts.chart('container2', fixed_chart_options);
        };
      }
    } else {
        if(!outputFixed) {
          elementToHide.style.display = "none";
          containerToHide.style.display = "none";
      }
    };
};

updateChart(series);
});

    </script>
  </body>
</html>
